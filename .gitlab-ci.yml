---
services:
  - docker:dind

variables:
  IMAGE_NAME: ${CI_REGISTRY}/$CI_PROJECT_PATH
  IMAGE_TAG: ${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_HUB_ORG: pipelinecomponents


stages:
  - preflight
  - build
  - scan
  - deploy
  - manifest

# Generic DIND template
.dind: &dind
  image: docker:latest
  tags:
    - docker
  before_script:
    - docker info
  services:
    - name: docker:dind
      command: ["--experimental"]

# Generic preflight template
.preflight: &preflight
  stage: preflight

# Generic build template
.build: &build
  <<: *dind
  stage: build
  before_script:
    - docker info
    - |
      echo "${CI_JOB_TOKEN}" | docker login \
        --username gitlab-ci-token \
        --password-stdin \
        ${CI_REGISTRY}
    - docker pull "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:cache" || true
  script:
    - |
      docker build \
        --build-arg "BUILD_FROM=${FROM}" \
        --build-arg "BUILD_DATE=$(date +"%Y-%m-%dT%H:%M:%SZ")" \
        --build-arg "BUILD_ARCH=${BUILD_ARCH}" \
        --build-arg "BUILD_REF=${CI_COMMIT_SHA}" \
        --build-arg "BUILD_VERSION=${CI_COMMIT_TAG:-${CI_COMMIT_SHA:0:7}}" \
        --cache-from "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:cache" \
        --tag \
          "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:${CI_COMMIT_SHA}" \
        .
    - |
      docker push \
        "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:${CI_COMMIT_SHA}"

# Generic scan template
.scan: &scan
  <<: *dind
  stage: scan
  allow_failure: true
  before_script:
    - docker info
    - |
      echo "${CI_JOB_TOKEN}" | docker login \
        --username gitlab-ci-token \
        --password-stdin \
        ${CI_REGISTRY}
    - docker run -d --name db --restart on-failure arminc/clair-db:latest
    - |
      docker run -p 6060:6060 --link db:postgres -d --name clair \
        --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U curl ca-certificates wget
    - |
      curl \
        --silent \
        --show-error \
        --location \
        --fail \
        --retry 3 \
        --output /usr/bin/clair-scanner \
        https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - chmod +x /usr/bin/clair-scanner
    - touch clair-whitelist.yml
    - docker pull "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:${CI_COMMIT_SHA}"
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - |
      while ( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do \
        sleep 1 ; \
        echo -n "." ; \
        if [ $retries -eq 10 ] ; then  \
          echo " Timeout, aborting." ; \
          docker logs db
          docker logs clair
          exit 1 ; \
        fi ; \
        retries=$(($retries+1)) ; \
      done
  script:
    - |
      clair-scanner \
        -c http://docker:6060 \
        --ip $(hostname -i) \
        -w clair-whitelist.yml \
        -r gl-container-scanning-report.json \
        -l clair.log \
        "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:${CI_COMMIT_SHA}"
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

# Generic deploy template
.deploy: &deploy
  <<: *dind
  stage: deploy
  before_script:
    - docker info
    - |
      echo "${CI_JOB_TOKEN}" | docker login \
        --username gitlab-ci-token \
        --password-stdin \
        ${CI_REGISTRY}
    - |
      echo "${DOCKER_PASSWORD}" | docker login \
        --username "${DOCKER_LOGIN}" \
        --password-stdin
    - docker pull "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:${CI_COMMIT_SHA}"
  script:
    - |
      docker tag \
        "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:${CI_COMMIT_SHA}" \
        "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:cache"
    - docker push "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:cache"
    - TAG="${CI_COMMIT_TAG#v}"
    - TAG="${TAG:-${CI_COMMIT_SHA:0:7}}"
    - |
      docker tag \
        "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:${CI_COMMIT_SHA}" \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}:${BUILD_ARCH}-${TAG}"
    - |
      docker push \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}:${BUILD_ARCH}-${TAG}"
    - |
      docker tag \
        "${CI_REGISTRY_IMAGE}/${BUILD_ARCH}:${CI_COMMIT_SHA}" \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}-${BUILD_ARCH}:${TAG}"
    - |
      docker push \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}-${BUILD_ARCH}:${TAG}"
  only:
    - master
    - /^v\d+\.\d+\.\d+(?:-(?:beta|rc)(?:(?:(?:\+|\.)?[a-zA-Z0-9]+)*)?)?$/
  except:
    - /^(?!master).+@/

# Generic manifest template
.manifest: &manifest
  <<: *dind
  stage: manifest
  before_script:
    - mkdir -p ~/.docker
    - echo '{"experimental":"enabled"}' > ~/.docker/config.json
    - docker info
    - |
      echo "${DOCKER_PASSWORD}" | docker login \
        --username "${DOCKER_LOGIN}" \
        --password-stdin
  script:
    - TAG="${TAG#v}"
    - TAG="${TAG:-${CI_COMMIT_SHA:0:7}}"
    - REF="${CI_COMMIT_TAG#v}"
    - REF="${REF:-${CI_COMMIT_SHA:0:7}}"
    - |
      docker manifest create \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}:${TAG}" \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}:amd64-${REF}"
    - |
      docker manifest annotate \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}:${TAG}" \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}:amd64-${REF}" \
        --os=linux \
        --arch=amd64
    - |
      docker manifest push \
        "${DOCKER_HUB_ORG}/${CI_PROJECT_NAME}:${TAG}"
  except:
    - /^(?!master).+@/

# Preflight jobs
hadolint:
  <<: *preflight
  image: hadolint/hadolint:latest-debian
  before_script:
    - hadolint --version
  script:
    - hadolint "Dockerfile"

shellcheck:
  <<: *preflight
  image:
    name: 'koalaman/shellcheck-alpine:stable'
    entrypoint: [""]
  before_script:
    - shellcheck --version
    - apk --no-cache add parallel
  script:
    - >-
      find . -not -path './.git/*' -name '*.sh' -type f -print0 |
      parallel --will-cite -k -0 -n1 shellcheck

yamllint:
  <<: *preflight
  image: sdesbure/yamllint
  before_script:
    - yamllint --version
  script:
    - yamllint .

jsonlint:
  <<: *preflight
  image: sahsu/docker-jsonlint
  before_script:
    - jsonlint --version || true
    - apk --no-cache add parallel
  script:
    - |
      find . -not -path './.git/*' -name '*.json' -type f -print0 |
      parallel --will-cite -k -0 -n1 jsonlint -q

markdownlint:
  <<: *preflight
  image:
    name: ruby:alpine
    entrypoint: [""]
  before_script:
    - gem install mdl
    - mdl --version
  script:
    - mdl --style all --warnings .

# Build Jobs
build amd64:
  <<: *build
  variables:
    BUILD_ARCH: amd64

# Scan jobs
clair amd64:
  <<: *scan
  variables:
    BUILD_ARCH: amd64

# Deploy jobs
deploy amd64:
  <<: *deploy
  variables:
    BUILD_ARCH: amd64

# Manifest jobs
manifest sha:
  <<: *manifest
  only:
    - master

manifest version:
  <<: *manifest
  variables:
    TAG: "${CI_COMMIT_TAG}"
  only:
    - /^v\d+\.\d+\.\d+(?:-(?:beta|rc)(?:(?:(?:\+|\.)?[a-zA-Z0-9]+)*)?)?$/

manifest stable:
  <<: *manifest
  variables:
    TAG: latest
  only:
    - /^v\d+\.\d+\.\d+(?:(?:(?:\+|\.)?[a-zA-Z0-9]+)*)?$/

manifest beta:
  <<: *manifest
  variables:
    TAG: beta
  only:
    - /^v\d+\.\d+\.\d+(?:-(?:beta|rc)(?:(?:(?:\+|\.)?[a-zA-Z0-9]+)*)?)?$/

manifest edge:
  <<: *manifest
  variables:
    TAG: edge
  only:
    - master
